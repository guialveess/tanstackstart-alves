/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as X0RouteImport } from './routes/x0'
import { Route as LoveRouteImport } from './routes/love'
import { Route as CatRouteImport } from './routes/cat'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const X0Route = X0RouteImport.update({
  id: '/x0',
  path: '/x0',
  getParentRoute: () => rootRouteImport,
} as any)
const LoveRoute = LoveRouteImport.update({
  id: '/love',
  path: '/love',
  getParentRoute: () => rootRouteImport,
} as any)
const CatRoute = CatRouteImport.update({
  id: '/cat',
  path: '/cat',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/cat': typeof CatRoute
  '/love': typeof LoveRoute
  '/x0': typeof X0Route
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/cat': typeof CatRoute
  '/love': typeof LoveRoute
  '/x0': typeof X0Route
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/cat': typeof CatRoute
  '/love': typeof LoveRoute
  '/x0': typeof X0Route
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/cat' | '/love' | '/x0'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/cat' | '/love' | '/x0'
  id: '__root__' | '/' | '/about' | '/cat' | '/love' | '/x0'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CatRoute: typeof CatRoute
  LoveRoute: typeof LoveRoute
  X0Route: typeof X0Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/x0': {
      id: '/x0'
      path: '/x0'
      fullPath: '/x0'
      preLoaderRoute: typeof X0RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/love': {
      id: '/love'
      path: '/love'
      fullPath: '/love'
      preLoaderRoute: typeof LoveRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cat': {
      id: '/cat'
      path: '/cat'
      fullPath: '/cat'
      preLoaderRoute: typeof CatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CatRoute: CatRoute,
  LoveRoute: LoveRoute,
  X0Route: X0Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
